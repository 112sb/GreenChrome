#define EXTERNC extern "C"
#define EXPORT EXTERNC __declspec(dllexport) void __cdecl

// 声明导出函数
EXPORT CloseDriver() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT DefDriverProc() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT DriverCallback() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT DrvGetModuleHandle() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT GetDriverModuleHandle() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT NotifyCallbackData() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT OpenDriver() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT PlaySound() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT PlaySoundA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT PlaySoundW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT SendDriverMessage() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT WOW32DriverCallback() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT WOW32ResolveMultiMediaHandle() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT WOWAppExit() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT aux32Message() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT auxGetDevCapsA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT auxGetDevCapsW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT auxGetNumDevs() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT auxGetVolume() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT auxOutMessage() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT auxSetVolume() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT joy32Message() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT joyConfigChanged() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT joyGetDevCapsA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT joyGetDevCapsW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT joyGetNumDevs() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT joyGetPos() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT joyGetPosEx() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT joyGetThreshold() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT joyReleaseCapture() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT joySetCapture() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT joySetThreshold() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mci32Message() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mciDriverNotify() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mciDriverYield() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mciExecute() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mciFreeCommandResource() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mciGetCreatorTask() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mciGetDeviceIDA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mciGetDeviceIDFromElementIDA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mciGetDeviceIDFromElementIDW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mciGetDeviceIDW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mciGetDriverData() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mciGetErrorStringA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mciGetErrorStringW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mciGetYieldProc() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mciLoadCommandResource() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mciSendCommandA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mciSendCommandW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mciSendStringA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mciSendStringW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mciSetDriverData() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mciSetYieldProc() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mid32Message() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiConnect() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiDisconnect() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiInAddBuffer() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiInClose() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiInGetDevCapsA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiInGetDevCapsW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiInGetErrorTextA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiInGetErrorTextW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiInGetID() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiInGetNumDevs() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiInMessage() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiInOpen() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiInPrepareHeader() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiInReset() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiInStart() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiInStop() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiInUnprepareHeader() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiOutCacheDrumPatches() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiOutCachePatches() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiOutClose() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiOutGetDevCapsA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiOutGetDevCapsW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiOutGetErrorTextA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiOutGetErrorTextW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiOutGetID() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiOutGetNumDevs() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiOutGetVolume() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiOutLongMsg() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiOutMessage() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiOutOpen() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiOutPrepareHeader() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiOutReset() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiOutSetVolume() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiOutShortMsg() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiOutUnprepareHeader() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiStreamClose() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiStreamOpen() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiStreamOut() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiStreamPause() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiStreamPosition() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiStreamProperty() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiStreamRestart() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT midiStreamStop() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mixerClose() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mixerGetControlDetailsA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mixerGetControlDetailsW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mixerGetDevCapsA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mixerGetDevCapsW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mixerGetID() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mixerGetLineControlsA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mixerGetLineControlsW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mixerGetLineInfoA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mixerGetLineInfoW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mixerGetNumDevs() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mixerMessage() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mixerOpen() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mixerSetControlDetails() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmDrvInstall() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmGetCurrentTask() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmTaskBlock() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmTaskCreate() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmTaskSignal() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmTaskYield() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmioAdvance() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmioAscend() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmioClose() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmioCreateChunk() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmioDescend() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmioFlush() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmioGetInfo() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmioInstallIOProcA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmioInstallIOProcW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmioOpenA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmioOpenW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmioRead() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmioRenameA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmioRenameW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmioSeek() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmioSendMessage() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmioSetBuffer() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmioSetInfo() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmioStringToFOURCCA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmioStringToFOURCCW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmioWrite() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mmsystemGetVersion() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mod32Message() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT mxd32Message() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT sndPlaySoundA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT sndPlaySoundW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT tid32Message() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT timeBeginPeriod() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT timeEndPeriod() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT timeGetDevCaps() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT timeGetSystemTime() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT timeGetTime() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT timeKillEvent() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT timeSetEvent() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveInAddBuffer() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveInClose() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveInGetDevCapsA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveInGetDevCapsW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveInGetErrorTextA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveInGetErrorTextW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveInGetID() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveInGetNumDevs() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveInGetPosition() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveInMessage() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveInOpen() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveInPrepareHeader() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveInReset() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveInStart() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveInStop() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveInUnprepareHeader() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutBreakLoop() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutClose() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutGetDevCapsA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutGetDevCapsW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutGetErrorTextA() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutGetErrorTextW() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutGetID() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutGetNumDevs() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutGetPitch() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutGetPlaybackRate() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutGetPosition() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutGetVolume() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutMessage() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutOpen() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutPause() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutPrepareHeader() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutReset() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutRestart() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutSetPitch() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutSetPlaybackRate() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutSetVolume() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutUnprepareHeader() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT waveOutWrite() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT wid32Message() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }
EXPORT wod32Message() { __asm__ (".byte 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90");  }

// 还原导出函数
void InstallJMP(PBYTE BaseAddress, MWORD Function)
{
#ifdef _WIN64
	BYTE move[] = {0x48, 0xB8};//move rax,xxL);
	BYTE jump[] = {0xFF, 0xE0};//jmp rax

	WriteMemory(BaseAddress, move, sizeof(move));
	BaseAddress += sizeof(move);

	WriteMemory(BaseAddress, (PBYTE)&Function, sizeof(MWORD));
	BaseAddress += sizeof(MWORD);

	WriteMemory(BaseAddress, jump, sizeof(jump));
#else
	BYTE jump[] = {0xE9};
	WriteMemory(BaseAddress, jump, sizeof(jump));
	BaseAddress += sizeof(jump);

	MWORD offset = Function - (MWORD)BaseAddress - 4;
	WriteMemory(BaseAddress, (PBYTE)&offset, sizeof(offset));
#endif // _WIN64
}

// 加载系统dll
void LoadSysDll(HINSTANCE hModule)
{
	PBYTE pImageBase = (PBYTE)hModule;
	PIMAGE_DOS_HEADER pimDH = (PIMAGE_DOS_HEADER)pImageBase;
	if(pimDH->e_magic==IMAGE_DOS_SIGNATURE)
	{
		PIMAGE_NT_HEADERS pimNH = (PIMAGE_NT_HEADERS)(pImageBase + pimDH->e_lfanew);
		if(pimNH->Signature==IMAGE_NT_SIGNATURE)
		{
			PIMAGE_EXPORT_DIRECTORY pimExD = (PIMAGE_EXPORT_DIRECTORY)(pImageBase + pimNH->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);
			DWORD*  pName		= (DWORD*)(pImageBase + pimExD->AddressOfNames);
			DWORD*  pFunction	= (DWORD*)(pImageBase + pimExD->AddressOfFunctions);

			TCHAR szDLL[MAX_PATH+1];
			GetSystemDirectory(szDLL, MAX_PATH);
			lstrcat(szDLL, TEXT("\\winmm.dll"));

			HINSTANCE module = LoadLibrary(szDLL);
			if (module!=NULL)
			{
				for (size_t i = 0; i < pimExD->NumberOfNames; i++)
				{
					MWORD Original = (MWORD)GetProcAddress(module, (char*)(pImageBase + pName[i]) );
					if(Original)
					{
						InstallJMP(pImageBase + pFunction[i], Original);
					}
				}
			}
		}
	}
}

